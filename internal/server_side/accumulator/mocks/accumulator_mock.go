// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/server_side/accumulator/accumulator.go

// Package accumulator_mock is a generated GoMock package.
package accumulator_mock

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	entity "scloud/internal/server_side/entity"
)

// MockAccumulator is a mock of Accumulator interface
type MockAccumulator struct {
	ctrl     *gomock.Controller
	recorder *MockAccumulatorMockRecorder
}

// MockAccumulatorMockRecorder is the mock recorder for MockAccumulator
type MockAccumulatorMockRecorder struct {
	mock *MockAccumulator
}

// NewMockAccumulator creates a new mock instance
func NewMockAccumulator(ctrl *gomock.Controller) *MockAccumulator {
	mock := &MockAccumulator{ctrl: ctrl}
	mock.recorder = &MockAccumulatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccumulator) EXPECT() *MockAccumulatorMockRecorder {
	return m.recorder
}

// Accumulate mocks base method
func (m *MockAccumulator) Accumulate() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Accumulate")
}

// Accumulate indicates an expected call of Accumulate
func (mr *MockAccumulatorMockRecorder) Accumulate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accumulate", reflect.TypeOf((*MockAccumulator)(nil).Accumulate))
}

// GetSavedRange mocks base method
func (m *MockAccumulator) GetSavedRange() []int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSavedRange")
	ret0, _ := ret[0].([]int)
	return ret0
}

// GetSavedRange indicates an expected call of GetSavedRange
func (mr *MockAccumulatorMockRecorder) GetSavedRange() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSavedRange", reflect.TypeOf((*MockAccumulator)(nil).GetSavedRange))
}

// AddToQueue mocks base method
func (m *MockAccumulator) AddToQueue(message *entity.Message) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddToQueue", message)
}

// AddToQueue indicates an expected call of AddToQueue
func (mr *MockAccumulatorMockRecorder) AddToQueue(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToQueue", reflect.TypeOf((*MockAccumulator)(nil).AddToQueue), message)
}
